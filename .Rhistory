}
else a=a+1
}
}
while (r <= nrow(trialseq)){
dif<-abs(n-2*sum(trialseq[r,]=="A"))
if(!dif==0){
trialseq<-trianseq[-r,]
next
}
r=r+1
}
colnames(finalseq)<-1:ncol(finalseq)
rownames(finalseq)<-1:nrow(finalseq)
finalseql
}
test<-CreateMTI(10,3)
CreateMTI<-function(n=as.numeric(), m=as.numeric){
trialseq<-as.data.frame(c("A","B") ,byrow=T)
while (ncol(trialseq)<n) {
i=ncol(trialseq)
j=nrow(trialseq)
trialseq<-rbind(trialseq,trialseq)
trialseq[,i+1]<-c(rep("A",j),rep("B",j))
a=1
while (!a > nrow(trialseq)){
diff<-abs(ncol(trialseq)-2*sum(trialseq[a,]=="A"))
if(diff > m){
trialseq<-trialseq[-a,]
next
}
else a=a+1
}
}
while (r <= nrow(trialseq)){
dif<-abs(n-2*sum(trialseq[r,]=="A"))
if(!dif==0){
trialseq<-trialseq[-r,]
next
}
r=r+1
}
colnames(finalseq)<-1:ncol(finalseq)
rownames(finalseq)<-1:nrow(finalseq)
finalseq
}
test<-CreateMTI(10,3)
CreateMTI<-function(n=as.numeric(), m=as.numeric){
trialseq<-as.data.frame(c("A","B") ,byrow=T)
while (ncol(trialseq)<n) {
i=ncol(trialseq)
j=nrow(trialseq)
trialseq<-rbind(trialseq,trialseq)
trialseq[,i+1]<-c(rep("A",j),rep("B",j))
a=1
while (!a > nrow(trialseq)){
diff<-abs(ncol(trialseq)-2*sum(trialseq[a,]=="A"))
if(diff > m){
trialseq<-trialseq[-a,]
next
}
else a=a+1
}
}
while (r <= nrow(trialseq)){
dif<-abs(n-2*sum(trialseq[r,]=="A"))
if(!dif==0){
trialseq<-trialseq[-r,]
next
}
r=r+1
}
colnames(trialseq)<-1:ncol(trialseq)
rownames(trialseq)<-1:nrow(trialseq)
trialseq
}
test<-CreateMTI(10,3)
View(test)
CreateMTI<-function(n=as.numeric(), m=as.numeric){
trialseq<-as.data.frame(c("A","B") ,byrow=T)
while (ncol(trialseq)<n) {
i=ncol(trialseq)
j=nrow(trialseq)
trialseq<-rbind(trialseq,trialseq)
trialseq[,i+1]<-c(rep("A",j),rep("B",j))
a=1
while (!a > nrow(trialseq)){
diff<-abs(ncol(trialseq)-2*sum(trialseq[a,]=="A"))
if(diff > m){
trialseq<-trialseq[-a,]
next
}
else a=a+1
}
}
r=1
while (r <= nrow(trialseq)){
dif<-abs(n-2*sum(trialseq[r,]=="A"))
if(!dif==0){
trialseq<-trialseq[-r,]
next
}
r=r+1
}
colnames(trialseq)<-1:ncol(trialseq)
rownames(trialseq)<-1:nrow(trialseq)
trialseq
}
test<-CreateMTI(10,3)
View(test)
test<-CreateMTI(16,3)
test<-CreateMTI(12,3)
test143<-CreateMTI(14,3)
View(test)
test143<-CreateMTI(16,3)
View(test143)
View(test143)
CreateMTI(100,8)
MTI100_8<-CreateMTI(100,8)
library(swirl)
rm(list=ls())
swirl()
swirl()
getwd()
swirl()
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y=x-3
y<-x-3
y
z<c(1.1,9,3.14)
z<c_(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
z*2+100
info()
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files
)
old.dir
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
nxt()
file.path()
file.path("mytest3.R")
file.path("mytest3.R","folder1","folder2")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2/testdir3",recursive=T)
dir.create("testdir2","testdir3",recursive=T)
dir.create(file.path("testdir2","testdir3"),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=T)
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink('testdir2', recursive = TURE)
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
unlink('testdir',recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5:10,length = 30
)
seq(5,10,length = 30)
my_seq<-seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2,),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
numvect<1
num_vect<1
tf<-num_vect<1
tf
as<-num_vect>=6
num_vect>=6
my_char<-c("My","name","is")
pirnt(my_char)
print(my_char)
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Evan")
my_name
paste(my_name,collapse = " ")
paste("Hello","World",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","C"),sep=" ")
paste(1:3,c("X","Y","C"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4,sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = F)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,datasets)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:5:20)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.1",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
.na(c(3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrage(cran2,ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+100)
mutate(cran3,correct_size=size+1000)
summerize(cran,avg_byte=mean(size))
summarize(cran,avg_byte=mean(size))
summarize(cran,avg_bytes=mean(size))
library("dplyr")
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summerize(by_package,mean(size))
summarize(by_package,mean(size))
submit()
?n
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(reult3)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count-grade)
gather(students,sex,count,-grade)
students2
gather(students2,sex_class, count, -grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separte(data=res,col=sex_class,into=c("sex","class"))
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
students3
submit()
submit()
?spread
submit()
submit()
extract_numeric(("class5"))
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status=="passed")
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
packageVersion('dplyr')
blind_row(passed,failed)
blind_rows(passed,failed)
bind_rows(passed,failed)
sat
submit()
submit()
submit()
?mutate
submit()
setwd(~/ExData_Plotting1)
setwd(./ExData_Plotting1)
setwd("./ExData_Plotting1")
getwd
getwd()
read.table("household_power_consumption.txt")
projec_1<-read.table("household_power_consumption.txt")
View(projec_1)
projec_1<-read.table("household_power_consumption.txt",sep = ",",header = T)
View(projec_1)
projec_1<-read.table("household_power_consumption.txt",sep = ";",header = T)
View(projec_1)
"Numeric","Numeric","Numeric","Numeric"  ))
projec_1<-read.table("household_power_consumption.txt",sep = ";",header = T,
colClasses = c("Date","POSIXct","Numeric","Numeric","Numeric",
"Numeric","Numeric","Numeric","Numeric"  ))
View(projec_1)
colClasses = c("Date","POSIXlt","Numeric","Numeric","Numeric",
projec_1<-read.table("household_power_consumption.txt",sep = ";",header = T,
colClasses = c("Date","POSIXlt","Numeric","Numeric","Numeric",
"Numeric","Numeric","Numeric","Numeric"  ))
projec_1<-read.table("household_power_consumption.txt",sep = ";",
header = T,na.strings = "?",
colClasses = c("Date","POSIXlt","Numeric","Numeric","Numeric",
"Numeric","Numeric","Numeric","Numeric"))
projec_1<-read.table("household_power_consumption.txt",sep = ";",
header = T,na.strings = "?",
colClasses = c("character","character","Numeric","Numeric","Numeric",
"Numeric","Numeric","Numeric","Numeric"))
projec_1<-read.table("/User/evanmac/desktop/education/R STUDY/household_power_consumption.txt",
projec_1<-read.table("/User/evanmac/desktop/education/R STUDY/household_power_consumption.txt",
sep = ";",
header = T,stringsAsFactors = F)
projec_1<-read.table("/Users/evanmac/desktop/education/R STUDY/household_power_consumption.txt",
sep = ";",
header = T,stringsAsFactors = F)
projec_1<-read.table("/Users/evanmac/Desktop/education/R STUDY/data/household_power_consumption.txt",
sep = ";",
header = T,stringsAsFactors = F)
View(projec_1)
projec_1$Date<-as.Date(projec_1$Date)
projec_1<-read.table("/Users/evanmac/Desktop/education/R STUDY/data/household_power_consumption.txt",
sep = ";",
header = T,stringsAsFactors = F)
Date1<-as.Date(projec_1$Date,format = "%d-%m-%Y")
Date1
x<-as.Date(projec_1$Date,format = "%d-%m-%Y")
head(x)
x<-as.Date(projec_1$Date,format = "%d/%m/%Y")
head(x)
projec_1$Date<-x
View(projec_1)
class(projec_1$Date)
projec1$Date>as.Date("2007-01-31")
projec_1$Date>as.Date("2007-01-31")
project_1<-projec_1[which(projec_1$Date>as.Date("2007-01-31")&
projec_1$Date<as.Date("2007-02-03")),]
View(project_1)
class(projec_1$Date)
as.numeric(project_1$Global_active_power[,3:9])
as.numeric(project_1[,3:9])
as.numeric(project_1[,3])
for (i in 3:9){
project_1[,i]<-as.numeric(project_1[,i])
}
View(project_1)
colors
colors()
colors("red")
colors(red)
colors()="red"
colors()=="red"
class(colors())
clors()["red"]
colors()["red"]
colors()[red]
colors()[]
which(colors(=="red"))
which(colors()=="red")
hist(project_1$Global_active_power,col=552,main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)",ylim = 1200)
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)",ylim = 1:1200)
xlab ="Global Active Power(kilowatts)",ylim = T)
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)",ylim <1200)
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)",ylim=200)
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)",ylim=6)
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
png("plot1.png")
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
off.dev()
png("plot1.png")
hist(project_1$Global_active_power,col="red",main="Global Active Power",
xlab ="Global Active Power(kilowatts)")
dev.off()
project_1$weekdays<-weekdays(project_1$Date,T)
View(project_1)
time(project_1$Time)
as.Date(project_1$Time)
as.POSIXct(project_1$Time)
y<-as.POSIXct(paste(project_1$Date,project_1$Time),format="%Y-%m-%d %H:%M:%S")
head(y)
project_1$DateTime<-as.POSIXct(paste(project_1$Date,project_1$Time),
format="%Y-%m-%d %H:%M:%S")
with(project_1, plot(weekdays,Global_active_power))
with(project_1, plot(weekdays,Global_active_power))
with(project_1, plot(weekdays,Global_active_power))
with(project_1, plot(DateTime,Global_active_power))
with(project_1, plot(DateTime,Global_active_power),type=l)
with(project_1, plot(DateTime,Global_active_power),type=l)
with(project_1, lines(DateTime,Global_active_power),)
with(project_1, lines(DateTime,Global_active_power,type = "c"))
with(project_1, lines(DateTime,Global_active_power,type = "c"))
with(project_1, lines(DateTime,Global_active_power))
y<-as.POSIXct(paste(project_1$Date,project_1$Time),format="%Y-%m-%d %H:%M:%S")
with(project_1, lines(DateTime,Global_active_power))
with(project_1, plot(DateTime,Global_active_power,type="c"))
plot(project_1$DateTime,project_1$Global_active_power,type="c")
plot(project_1$DateTime,project_1$Global_active_power)
